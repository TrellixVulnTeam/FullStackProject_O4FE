{"ast":null,"code":"var _jsxFileName = \"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/TodoComponent.jsx\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Field, Form, Formik, ErrorMessage } from 'formik';\nimport TodoDataService from '../../api/todo/TodoDataService';\nimport AuthenticationService from './AuthenticationService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      description: \"\",\n      targetDate: moment(new Date()).format('YYYY-MM-DD')\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.id == -1) {\n      return;\n    }\n\n    let username = AuthenticationService.getLoggedInUser();\n    TodoDataService.retrieveOneTodo(username, this.state.id).then(response => this.setState({\n      description: response.data.description,\n      targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n    }));\n  }\n\n  render() {\n    let description = this.state.description;\n    let targetDate = this.state.targetDate;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Update Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            description: description,\n            targetDate: targetDate\n          },\n          onSubmit: this.onSubmit,\n          validate: this.validate,\n          validateOnBlur: false,\n          validateOnChange: false,\n          enableReinitialize: true,\n          children: props => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"description\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"targetDate\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-label\",\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"text\",\n                name: \"description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-label\",\n                children: \"Target Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"date\",\n                name: \"targetDate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  }\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInUser();\n    let todo = {\n      id: this.state.id,\n      description: values.description,\n      targetDate: values.targetDate\n    };\n\n    if (this.state.id != -1) {\n      TodoDataService.updateTodo(username, this.state.id, todo).then(() => this.props.history.push('/todos'));\n    } else {\n      TodoDataService.postTodo(username, todo).then(() => this.props.history.push('/todos'));\n    }\n  }\n\n  validate(values) {\n    let errors = {}; // check if description is valid\n\n    if (!values.description) {\n      errors.description = \"You need to add description.\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Add at least 5-character description.\";\n    } // check if date is valid\n\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = \"Enter a valid target date.\";\n    }\n\n    return errors;\n  }\n\n}\n\nexport default TodoComponent;","map":{"version":3,"sources":["/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/TodoComponent.jsx"],"names":["React","Component","moment","Field","Form","Formik","ErrorMessage","TodoDataService","AuthenticationService","TodoComponent","constructor","props","state","id","match","params","description","targetDate","Date","format","onSubmit","bind","validate","componentDidMount","username","getLoggedInUser","retrieveOneTodo","then","response","setState","data","render","values","todo","updateTodo","history","push","postTodo","errors","length","isValid"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Field, Form, Formik, ErrorMessage } from 'formik'\nimport TodoDataService from '../../api/todo/TodoDataService'\nimport AuthenticationService from './AuthenticationService'\n\nclass TodoComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: this.props.match.params.id,\n            description: \"\",\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n    }\n\n    componentDidMount() {\n        if (this.state.id == -1) {\n            return\n        }\n        let username = AuthenticationService.getLoggedInUser()\n        TodoDataService.retrieveOneTodo(username, this.state.id)\n            .then(\n                response => (\n                    this.setState({\n                        description: response.data.description,\n                        targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n                    })\n                )\n            )\n    }\n\n    render() {\n        let description = this.state.description\n        let targetDate = this.state.targetDate\n        return (\n            <div>\n                <h1>Update Todo</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{\n                            description: description,\n                            targetDate: targetDate\n                        }}\n                        onSubmit={this.onSubmit}\n                        validate={this.validate}\n                        validateOnBlur={false}\n                        validateOnChange={false}\n                        enableReinitialize={true}>\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"targetDate\" component=\"div\" className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label className=\"form-label\">Description</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\n                                    </fieldset>\n\n                                    <fieldset className=\"form-group\">\n                                        <label className=\"form-label\">Target Date</label>\n                                        <Field className=\"form-control\" type=\"date\" name=\"targetDate\" />\n                                    </fieldset>\n\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n                </div>\n            </div>\n        )\n    }\n\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUser()\n        let todo = {\n            id: this.state.id,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n        if (this.state.id != -1) {\n            TodoDataService.updateTodo(username, this.state.id, todo).then(\n                () => (this.props.history.push('/todos'))\n            )\n        } else {\n            TodoDataService.postTodo(username, todo).then(\n                () => (this.props.history.push('/todos'))\n            )\n        }\n    }\n\n    validate(values) {\n        let errors = {}\n        // check if description is valid\n        if (!values.description) {\n            errors.description = \"You need to add description.\"\n        } else if (values.description.length < 5) {\n            errors.description = \"Add at least 5-character description.\"\n        }\n        // check if date is valid\n        if (!moment(values.targetDate).isValid()) {\n            errors.targetDate = \"Enter a valid target date.\"\n        }\n        return errors\n    }\n}\n\nexport default TodoComponent"]},"metadata":{},"sourceType":"module"}