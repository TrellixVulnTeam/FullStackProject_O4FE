{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/basicauth', {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n    //console.log('registerSuccessfulLogin')\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","basicAuthHeader","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOJ,KAAK,CAACK,GAAN,CAAU,iCAAV,EACH;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAmCC,QAAnC;AAAhB;AAAV,KADG,CAAP;AAEH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAUC,QAAV,EAAoB;AACpC,WAAO,WAAYK,MAAM,CAACC,IAAP,CAAYP,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAnB;AACH;;AAEDO,EAAAA,uBAAuB,CAACR,QAAD,EAAUC,QAAV,EAAmB;AACtC;AACA;AACAQ,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CV,QAA5C;AACA,SAAKW,sBAAL,CAA4B,KAAKN,oBAAL,CAA0BL,QAA1B,EAAmCC,QAAnC,CAA5B;AACH;;AAEDW,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,KAAP;AAChB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP;AAChB,WAAOA,IAAP;AACH;;AAEDJ,EAAAA,sBAAsB,CAACO,eAAD,EAAkB;AAEpCrB,IAAAA,KAAK,CAACsB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKR,cAAL,EAAH,EAA0B;AACtBQ,QAAAA,MAAM,CAACnB,OAAP,CAAeC,aAAf,GAA+Bc,eAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AAQH;;AA5CuB;;AA+C5B,eAAe,IAAIxB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get('http://localhost:8080/basicauth', \n            {headers: {authorization: this.createBasicAuthToken(username,password)}})\n    }\n\n    createBasicAuthToken(username,password) {\n        return 'Basic ' +  window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username,password){\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem('authenticatedUser', username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username,password))\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user===null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user===null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(basicAuthHeader) {\n\n        axios.interceptors.request.use(\n            (config) => {\n                if(this.isUserLoggedIn()) {\n                    config.headers.authorization = basicAuthHeader\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()\n"]},"metadata":{},"sourceType":"module"}