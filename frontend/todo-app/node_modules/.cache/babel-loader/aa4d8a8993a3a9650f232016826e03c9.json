{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(\"http://localhost:8080/basicauth\", {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  } // when user logging in successfully, save the authentication token for the entire application\n\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  } // when logging out, remove authentication token in session storage\n\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  } // check if user logged in\n\n\n  isLoggedIn() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    return user === null ? false : true;\n  } // return logged in username\n\n\n  getLoggedInUser() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    return user == null ? '' : user;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    // console.log(basicAuthHeader)\n    axios.interceptors.request.use(config => {\n      if (this.isLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n} // for React component we export the class directly, for helper services we export an instance of the class (an object)\n\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isLoggedIn","user","getItem","getLoggedInUser","basicAuthHeader","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAElD,WAAOJ,KAAK,CAACK,GAAN,CAAU,iCAAV,EAA6C;AAACC,MAAAA,OAAO,EAAG;AAACC,QAAAA,aAAa,EAAG,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KAA7C,CAAP;AACH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAYK,MAAM,CAACC,IAAP,CAAYP,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAnB;AACH,GATuB,CAWxB;;;AACAO,EAAAA,uBAAuB,CAACR,QAAD,EAAWC,QAAX,EAAqB;AACxCQ,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CV,QAA5C;AACA,SAAKW,sBAAL,CAA4B,KAAKN,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH,GAfuB,CAgBxB;;;AACAW,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH,GAnBuB,CAoBxB;;;AACAC,EAAAA,UAAU,GAAG;AACT,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,WAAQD,IAAI,KAAK,IAAV,GAAkB,KAAlB,GAA0B,IAAjC;AACH,GAxBuB,CAyBxB;;;AACAE,EAAAA,eAAe,GAAG;AACd,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,WAAQD,IAAI,IAAI,IAAT,GAAiB,EAAjB,GAAsBA,IAA7B;AACH;;AAEDJ,EAAAA,sBAAsB,CAACO,eAAD,EAAkB;AACpC;AACArB,IAAAA,KAAK,CAACsB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKR,UAAL,EAAJ,EAAuB;AACnBQ,QAAAA,MAAM,CAACnB,OAAP,CAAeC,aAAf,GAA+Bc,eAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AAQH;;AAzCuB,C,CA4C5B;;;AACA,eAAe,IAAIxB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\"\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        \n        return axios.get(\"http://localhost:8080/basicauth\", {headers : {authorization : this.createBasicAuthToken(username, password)}})\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' +  window.btoa(username + \":\" + password)\n    }\n\n    // when user logging in successfully, save the authentication token for the entire application\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem(\"authenticatedUser\", username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n    // when logging out, remove authentication token in session storage\n    logout() {\n        sessionStorage.removeItem(\"authenticatedUser\")\n    }\n    // check if user logged in\n    isLoggedIn() {\n        let user = sessionStorage.getItem(\"authenticatedUser\")\n        return (user === null) ? false : true\n    }\n    // return logged in username\n    getLoggedInUser() {\n        let user = sessionStorage.getItem(\"authenticatedUser\")\n        return (user == null) ? '' : user\n    }\n\n    setupAxiosInterceptors(basicAuthHeader) {\n        // console.log(basicAuthHeader)\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isLoggedIn()) {\n                    config.headers.authorization = basicAuthHeader\n                }\n                return config\n            }\n        )\n    }\n}\n\n// for React component we export the class directly, for helper services we export an instance of the class (an object)\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}