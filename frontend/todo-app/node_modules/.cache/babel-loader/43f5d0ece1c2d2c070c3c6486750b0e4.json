{"ast":null,"code":"import axios from \"axios\";\nimport { API_URL } from \"../../Constants\";\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(`${API_URL}/basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(`${JPA_API_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  } // when user logging in successfully, save the authentication token for the entire application\n\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJwtToken(token));\n  } // when logging out, remove authentication token in session storage\n\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  } // check if user logged in\n\n\n  isLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    return user === null ? false : true;\n  } // return logged in username\n\n\n  getLoggedInUser() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    return user == null ? '' : user;\n  }\n\n  setupAxiosInterceptors(token) {\n    // console.log(basicAuthHeader)\n    axios.interceptors.request.use(config => {\n      if (this.isLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n} // for React component we export the class directly, for helper services we export an instance of the class (an object)\n\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","post","JPA_API_URL","window","btoa","createJwtToken","token","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginForJwt","logout","removeItem","isLoggedIn","user","getItem","getLoggedInUser","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAElD,WAAON,KAAK,CAACO,GAAN,CAAW,GAAEN,OAAQ,YAArB,EAAkC;AAACO,MAAAA,OAAO,EAAG;AAACC,QAAAA,aAAa,EAAG,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KAAlC,CAAP;AACH;;AAEDK,EAAAA,+BAA+B,CAACN,QAAD,EAAWC,QAAX,EAAqB;AAEhD,WAAON,KAAK,CAACY,IAAN,CAAY,GAAEC,WAAY,eAA1B,EAA0C;AAC7CR,MAAAA,QAD6C;AACnCC,MAAAA;AADmC,KAA1C,CAAP;AAGH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAYQ,MAAM,CAACC,IAAP,CAAYV,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAnB;AACH;;AAEDU,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,WAAO,YAAaA,KAApB;AACH,GApBuB,CAsBxB;;;AACAC,EAAAA,uBAAuB,CAACb,QAAD,EAAWC,QAAX,EAAqB;AACxCa,IAAAA,cAAc,CAACC,OAAf,CAAuBlB,gCAAvB,EAAyDG,QAAzD;AACA,SAAKgB,sBAAL,CAA4B,KAAKX,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AAEDgB,EAAAA,6BAA6B,CAACjB,QAAD,EAAWY,KAAX,EAAkB;AAC3CE,IAAAA,cAAc,CAACC,OAAf,CAAuBlB,gCAAvB,EAAyDG,QAAzD;AACA,SAAKgB,sBAAL,CAA4B,KAAKL,cAAL,CAAoBC,KAApB,CAA5B;AACH,GA/BuB,CAiCxB;;;AACAM,EAAAA,MAAM,GAAG;AACLJ,IAAAA,cAAc,CAACK,UAAf,CAA0BtB,gCAA1B;AACH,GApCuB,CAqCxB;;;AACAuB,EAAAA,UAAU,GAAG;AACT,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBzB,gCAAvB,CAAX;AACA,WAAQwB,IAAI,KAAK,IAAV,GAAkB,KAAlB,GAA0B,IAAjC;AACH,GAzCuB,CA0CxB;;;AACAE,EAAAA,eAAe,GAAG;AACd,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBzB,gCAAvB,CAAX;AACA,WAAQwB,IAAI,IAAI,IAAT,GAAiB,EAAjB,GAAsBA,IAA7B;AACH;;AAEDL,EAAAA,sBAAsB,CAACJ,KAAD,EAAQ;AAC1B;AACAjB,IAAAA,KAAK,CAAC6B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKP,UAAL,EAAJ,EAAuB;AACnBO,QAAAA,MAAM,CAACxB,OAAP,CAAeC,aAAf,GAA+BQ,KAA/B;AACH;;AACD,aAAOe,MAAP;AACH,KANL;AAQH;;AA1DuB,C,CA6D5B;;;AACA,eAAe,IAAI7B,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\"\nimport { API_URL } from \"../../Constants\"\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        \n        return axios.get(`${API_URL}/basicauth`, {headers : {authorization : this.createBasicAuthToken(username, password)}})\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        \n        return axios.post(`${JPA_API_URL}/authenticate`, {\n            username, password\n            })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' +  window.btoa(username + \":\" + password)\n    }\n\n    createJwtToken(token) {\n        return 'Bearer ' +  token\n    }\n\n    // when user logging in successfully, save the authentication token for the entire application\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJwtToken(token))\n    }\n\n    // when logging out, remove authentication token in session storage\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n    }\n    // check if user logged in\n    isLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        return (user === null) ? false : true\n    }\n    // return logged in username\n    getLoggedInUser() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        return (user == null) ? '' : user\n    }\n\n    setupAxiosInterceptors(token) {\n        // console.log(basicAuthHeader)\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\n// for React component we export the class directly, for helper services we export an instance of the class (an object)\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}