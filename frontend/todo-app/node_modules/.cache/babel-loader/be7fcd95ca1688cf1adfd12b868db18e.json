{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticationService {\n  // when user logging in successfully, save the authentication token for the entire application\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors();\n  } // when logging out, remove authentication token in session storage\n\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  } // check if user logged in\n\n\n  isLoggedIn() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    return user === null ? false : true;\n  } // return logged in username\n\n\n  getLoggedInUser() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    return user == null ? '' : user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = 'hamburgersct';\n    let password = 'dummy';\n    let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    console.log(basicAuthHeader);\n    axios.interceptors.request.use(config => {\n      if (this.isLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n} // for React component we export the class directly, for helper services we export an instance of the class (an object)\n\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","registerSuccessfulLogin","username","password","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isLoggedIn","user","getItem","getLoggedInUser","basicAuthHeader","window","btoa","console","log","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAExB;AACAC,EAAAA,uBAAuB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxCC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CH,QAA5C;AACA,SAAKI,sBAAL;AACH,GANuB,CAOxB;;;AACAC,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH,GAVuB,CAWxB;;;AACAC,EAAAA,UAAU,GAAG;AACT,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,WAAQD,IAAI,KAAK,IAAV,GAAkB,KAAlB,GAA0B,IAAjC;AACH,GAfuB,CAgBxB;;;AACAE,EAAAA,eAAe,GAAG;AACd,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,WAAQD,IAAI,IAAI,IAAT,GAAiB,EAAjB,GAAsBA,IAA7B;AACH;;AAEDJ,EAAAA,sBAAsB,GAAG;AACrB,QAAIJ,QAAQ,GAAG,cAAf;AACA,QAAIC,QAAQ,GAAG,OAAf;AACA,QAAIU,eAAe,GAAG,WAAYC,MAAM,CAACC,IAAP,CAAYb,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlC;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYJ,eAAZ;AACAd,IAAAA,KAAK,CAACmB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKZ,UAAL,EAAJ,EAAuB;AACnBY,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BV,eAA/B;AACH;;AACD,aAAOQ,MAAP;AACH,KANL;AAQH;;AAnCuB,C,CAsC5B;;;AACA,eAAe,IAAIrB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\"\n\nclass AuthenticationService {\n\n    // when user logging in successfully, save the authentication token for the entire application\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem(\"authenticatedUser\", username)\n        this.setupAxiosInterceptors()\n    }\n    // when logging out, remove authentication token in session storage\n    logout() {\n        sessionStorage.removeItem(\"authenticatedUser\")\n    }\n    // check if user logged in\n    isLoggedIn() {\n        let user = sessionStorage.getItem(\"authenticatedUser\")\n        return (user === null) ? false : true\n    }\n    // return logged in username\n    getLoggedInUser() {\n        let user = sessionStorage.getItem(\"authenticatedUser\")\n        return (user == null) ? '' : user\n    }\n\n    setupAxiosInterceptors() {\n        let username = 'hamburgersct'\n        let password = 'dummy'\n        let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        console.log(basicAuthHeader)\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isLoggedIn()) {\n                    config.headers.authorization = basicAuthHeader\n                }\n                return config\n            }\n        )\n    }\n}\n\n// for React component we export the class directly, for helper services we export an instance of the class (an object)\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}