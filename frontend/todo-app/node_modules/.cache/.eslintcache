[{"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/index.js":"1","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/reportWebVitals.js":"2","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/App.js":"3","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/TodoApp.jsx":"4","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/ListTodoComponent.jsx":"5","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/AuthenticatedRoute.jsx":"6","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/LoginComponent.jsx":"7","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/HeaderComponent.jsx":"8","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/WelcomeComponent.jsx":"9","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/FooterComponent.jsx":"10","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/ErrorComponent.jsx":"11","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/LogoutComponent.jsx":"12","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/AuthenticationService.js":"13","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/api/todo/HelloWorldService.js":"14","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/api/todo/TodoDataService.js":"15","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/TodoComponent.jsx":"16"},{"size":500,"mtime":1631492020000,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1631492020000,"results":"19","hashOfConfig":"18"},{"size":832,"mtime":1631492020000,"results":"20","hashOfConfig":"18"},{"size":1681,"mtime":1631492020000,"results":"21","hashOfConfig":"18"},{"size":3777,"mtime":1631509821918,"results":"22","hashOfConfig":"18"},{"size":494,"mtime":1631492020000,"results":"23","hashOfConfig":"18"},{"size":3312,"mtime":1631839833254,"results":"24","hashOfConfig":"18"},{"size":1336,"mtime":1631492020000,"results":"25","hashOfConfig":"18"},{"size":2588,"mtime":1631683151458,"results":"26","hashOfConfig":"18"},{"size":297,"mtime":1631492020000,"results":"27","hashOfConfig":"18"},{"size":162,"mtime":1631492020000,"results":"28","hashOfConfig":"18"},{"size":374,"mtime":1631492020000,"results":"29","hashOfConfig":"18"},{"size":1676,"mtime":1631839744679,"results":"30","hashOfConfig":"18"},{"size":908,"mtime":1631836508580,"results":"31","hashOfConfig":"18"},{"size":825,"mtime":1631509821918,"results":"32","hashOfConfig":"18"},{"size":4182,"mtime":1631510336695,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1i7f3uq",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/index.js",[],["69","70"],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/reportWebVitals.js",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/App.js",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/TodoApp.jsx",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/ListTodoComponent.jsx",["71"],"import React, {Component} from 'react'\nimport TodoDataService from '../../api/todo/TodoDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\nimport moment from 'moment'\n\nclass ListTodoComponent extends Component{\n    constructor(props) {\n        super(props)\n        // console.log('constructor')\n        this.state = {\n            todos : [],\n            message : null\n        }\n        // binding\n        this.deleteTodoClicked = this.deleteTodoClicked.bind(this)\n        this.updateTodoClicked = this.updateTodoClicked.bind(this)\n        this.refreshTodos = this.refreshTodos.bind(this)\n        this.addTodoClicked = this.addTodoClicked.bind(this)\n    }\n\n    componentDidMount() {\n        this.refreshTodos()\n    }\n\n    refreshTodos() {\n        let username = AuthenticationService.getLoggedInUser()\n        TodoDataService.retrieveAllTodos(username)\n            .then(\n                // response => console.log(response)\n                response => {\n                    this.setState ({todos : response.data})\n                }\n            )\n    }\n\n    render() {\n        // console.log('render')\n        return (\n            <div>\n                <h1>Todo List</h1>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Description</th>\n                                <th>Target Date</th>\n                                <th>Is Completed?</th>\n                                <th>Operations</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.todos.map (\n                                    todo =>\n                                        <tr key={todo.id}>\n                                            <td>{todo.description}</td>\n                                            <td>{moment(todo.targetDate).format('YYYY-MM-DD').toString()}</td>\n                                            <td>{todo.done.toString()}</td>\n                                            <td><button className=\"btn btn-primary\" onClick={() => this.updateTodoClicked(todo.id)}>update</button></td>\n                                            <td><button className=\"btn btn-secondary\" onClick={() => this.deleteTodoClicked(todo.id)}>delete</button></td>\n                                        </tr>\n                                        // all attributes' names must match their names in backend data\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addTodoClicked}>Add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    deleteTodoClicked(id) {\n        let username = AuthenticationService.getLoggedInUser()\n        TodoDataService.deleteTodos(username, id)\n         .then (\n             response => { \n                this.setState({message : `Deleted the Todo No.${id} successfully.`})\n                // here to refresh the page after delete a todo\n                this.refreshTodos()\n                }\n         )\n        // console.log(username + \" \" + id)\n    }\n\n    updateTodoClicked(id) {\n        let username = AuthenticationService.getLoggedInUser()\n        // console.log(\"update \" + id)\n        this.props.history.push(`/todos/${id}`)\n    }\n\n    addTodoClicked() {\n        this.props.history.push('/todos/-1')\n    }\n}\n\nexport default ListTodoComponent","/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/AuthenticatedRoute.jsx",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/LoginComponent.jsx",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/HeaderComponent.jsx",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/WelcomeComponent.jsx",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/FooterComponent.jsx",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/ErrorComponent.jsx",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/LogoutComponent.jsx",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/AuthenticationService.js",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/api/todo/HelloWorldService.js",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/api/todo/TodoDataService.js",[],"/Users/sihanhe/Developer/FullStackProject/frontend/todo-app/src/components/todo/TodoComponent.jsx",["72","73"],"import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Field, Form, Formik, ErrorMessage } from 'formik'\nimport TodoDataService from '../../api/todo/TodoDataService'\nimport AuthenticationService from './AuthenticationService'\n\nclass TodoComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: this.props.match.params.id,\n            description: \"\",\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n    }\n\n    componentDidMount() {\n        if (this.state.id == -1) {\n            return\n        }\n        let username = AuthenticationService.getLoggedInUser()\n        TodoDataService.retrieveOneTodo(username, this.state.id)\n            .then(\n                response => (\n                    this.setState({\n                        description: response.data.description,\n                        targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n                    })\n                )\n            )\n    }\n\n    render() {\n        let description = this.state.description\n        let targetDate = this.state.targetDate\n        return (\n            <div>\n                <h1>Update Todo</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{\n                            description: description,\n                            targetDate: targetDate\n                        }}\n                        onSubmit={this.onSubmit}\n                        validate={this.validate}\n                        validateOnBlur={false}\n                        validateOnChange={false}\n                        enableReinitialize={true}>\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"targetDate\" component=\"div\" className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label className=\"form-label\">Description</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\n                                    </fieldset>\n\n                                    <fieldset className=\"form-group\">\n                                        <label className=\"form-label\">Target Date</label>\n                                        <Field className=\"form-control\" type=\"date\" name=\"targetDate\" />\n                                    </fieldset>\n\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n                </div>\n            </div>\n        )\n    }\n\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUser()\n        let todo = {\n            id: this.state.id,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n        if (this.state.id != -1) {\n            TodoDataService.updateTodo(username, this.state.id, todo).then(\n                () => (this.props.history.push('/todos'))\n            )\n        } else {\n            TodoDataService.addTodo(username, todo).then(\n                () => (this.props.history.push('/todos'))\n            )\n        }\n    }\n\n    validate(values) {\n        let errors = {}\n        // check if description is valid\n        if (!values.description) {\n            errors.description = \"You need to add description.\"\n        } else if (values.description.length < 5) {\n            errors.description = \"Add at least 5-character description.\"\n        }\n        // check if date is valid\n        if (!moment(values.targetDate).isValid()) {\n            errors.targetDate = \"Enter a valid target date.\"\n        }\n        return errors\n    }\n}\n\nexport default TodoComponent",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":90,"column":13,"nodeType":"80","messageId":"81","endLine":90,"endColumn":21},{"ruleId":"82","severity":1,"message":"83","line":20,"column":27,"nodeType":"84","messageId":"85","endLine":20,"endColumn":29},{"ruleId":"82","severity":1,"message":"86","line":84,"column":27,"nodeType":"84","messageId":"85","endLine":84,"endColumn":29},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'username' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]